"use strict";
const mysql = require("mysql2/promise");
require('dotenv').config(); // Load environment variables from .env file

// Function to display warning messages
function displayWarningMessage(warning) {
  switch (warning.Code) {
    case 1007:
      console.log(`Skipping Database Creation --> ${warning.Message}`);
      break;
    case 1050:
      console.log(`Skipping Table Creation --> ${warning.Message}`);
      break;
    default:
      console.log(`Warning --> ${warning.Message}`);
  }
}

// Function to get a connection to the MySQL server
async function getConnection() {
  return await mysql.createConnection({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
  });
}

// Function to create the database
async function makeDatabase(connection) {
  const [result, _] = await connection.query(
    `CREATE DATABASE IF NOT EXISTS ${process.env.DB_NAME};`
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Database!");
  }
}

// Function to create the Users table
async function makeUsersTable(connection) {
  const [result, _] = await connection.query(
    `
    CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      username VARCHAR(50) NOT NULL,
      email VARCHAR(100) NOT NULL,
      password VARCHAR(255) NOT NULL,
      createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
    `
  );

  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Users Table!");
  }
}

// Function to create the Posts table
async function makePostsTable(connection) {
  const [result, _] = await connection.query(
    `
    CREATE TABLE IF NOT EXISTS posts (
      id INT AUTO_INCREMENT PRIMARY KEY,
      title TEXT NOT NULL,
      description TEXT,
      video VARCHAR(4096),
      thumbnail VARCHAR(4096),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      fk_user_id INT,
      FOREIGN KEY (fk_user_id) REFERENCES users(id) ON DELETE CASCADE
    );
    `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Posts Table!");
  }
}

// Function to create the Comments table
async function makeCommentsTable(connection) {
  const [result, _] = await connection.query(
    ` 
    CREATE TABLE IF NOT EXISTS comments (
      id INT AUTO_INCREMENT PRIMARY KEY,
      text TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      fk_post_id INT,
      fk_user_id INT,
      FOREIGN KEY (fk_post_id) REFERENCES posts(id) ON DELETE CASCADE,
      FOREIGN KEY (fk_user_id) REFERENCES users(id) ON DELETE CASCADE
    );
    `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Comments Table!");
  }
}

// Function to create the Likes table
async function makeLikesTable(connection) {
  const [result, _] = await connection.query(
    `
    CREATE TABLE IF NOT EXISTS likes (
      id INT AUTO_INCREMENT PRIMARY KEY,
      fk_post_id INT,
      fk_user_id INT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (fk_post_id) REFERENCES posts(id) ON DELETE CASCADE,
      FOREIGN KEY (fk_user_id) REFERENCES users(id) ON DELETE CASCADE
    );
    `
  );
  if (result && result.warningStatus > 0) {
    const [warningResult, _] = await connection.query("SHOW WARNINGS");
    displayWarningMessage(warningResult[0]);
  } else {
    console.log("Created Likes Table!");
  }
}


// Main function to create the database and tables
(async function main() {
  let connection = null;
  try {
    connection = await getConnection();
    await makeDatabase(connection); // Create the database
    await connection.query(`USE ${process.env.DB_NAME}`); // Switch to the new database
    await makeUsersTable(connection); // Create the Users table
    await makePostsTable(connection); // Create the Posts table
    await makeCommentsTable(connection); // Create the Comments table
    await makeLikesTable(connection); // Create the Likes table
    connection.close();
    console.log("Database and tables setup complete!");
  } catch (error) {
    console.error("Error setting up the database:", error);
    if (connection != null) {
      connection.close();
    }
  }
})();
